[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bens-accessibility-software"
version = "1.0.0"
description = "Accessibility software for individuals with physical challenges, featuring scan-and-select capabilities, predictive text, and entertainment functions."
readme = "readme.md"
license = {file = "license"}
authors = [
    {name = "NARBE House", email = "contact@narbehouse.org"}
]
maintainers = [
    {name = "NARBE House", email = "contact@narbehouse.org"}
]
keywords = [
    "accessibility",
    "assistive-technology",
    "predictive-text",
    "keyboard",
    "communication",
    "entertainment"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Adaptive Technologies",
    "Topic :: Communications",
    "Topic :: Games/Entertainment",
]
requires-python = ">=3.8"
dependencies = [
    "pyttsx3>=2.90",
    "pyautogui>=0.9.54",
    "pynput>=1.7.6",
    "psutil>=5.9.0",
    "requests>=2.28.0",
    "pywin32>=306; sys_platform == 'win32'",
    "pandas>=1.5.0",
    "pygame>=2.1.0",
    "pymunk>=6.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=24.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/NARBEHOUSE/Ben-s-Software-"
Repository = "https://github.com/NARBEHOUSE/Ben-s-Software-.git"
Issues = "https://github.com/NARBEHOUSE/Ben-s-Software-/issues"

[project.scripts]
bens-software = "comm-v10:main"
bens-keyboard = "keyboard.keyboard:main"

[tool.hatch.build.targets.wheel]
packages = ["keyboard", "games", "data", "images", "soundfx"]

[tool.hatch.build.targets.sdist]
include = [
    "/keyboard",
    "/games", 
    "/data",
    "/images",
    "/soundfx",
    "/comm-v10.py",
    "/readme.md",
    "/license",
    "/pyproject.toml",
    "/disable_space_chrome.ahk"
]
exclude = [
    "**/__pycache__",
    "**/*.pyc",
    "**/*.pyo",
    "**/.pytest_cache",
    "**/.mypy_cache",
    "**/test_*.py",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=keyboard",
    "--cov=games",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["keyboard", "games"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
